<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:netsuite="http://www.mulesoft.org/schema/mule/netsuite"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/netsuite http://www.mulesoft.org/schema/mule/netsuite/current/mule-netsuite.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <batch:job name="syncOpportunitiesBatch" max-failed-records="-1">
        <batch:process-records>
            <batch:step name="findCustomer">

                <enricher source="#[payload.hasNext() ? payload.next()[&quot;externalId&quot;] : null]" target="#[payload.customerExternalId]" doc:name="enrich payload with Customer ExternalId">
                    <processor-chain doc:name="Processor Chain">
                        <dw:transform-message metadata:id="e3dfa24f-cba0-408b-b740-a2926f9688ce" doc:name="Create search criteria">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	basic: {
		companyName: {
			operator: "IS",
			searchValue: payload.Account.Name
		}
	}
} as :object {class: "com.netsuite.webservices.lists.relationships.CustomerSearch"}]]></dw:set-payload>
                        </dw:transform-message>
                        <netsuite:search config-ref="Netsuite" doc:name="Search for customer in Netsuite" searchRecord="CUSTOMER"/>
                    </processor-chain>
                </enricher>
                <logger message="Customer external ID: #[payload.customerExternalId]" level="INFO" doc:name="Log customer search result"/>
            </batch:step>
            <batch:step name="createCustomerIfDoesNotExistStep" accept-expression="#[payload.customerExternalId == null]">
				<enricher source="#[payload.getExternalId()]" target="#[payload.customerExternalId]" doc:name="enrich payload with Customer InternalId">
					<processor-chain doc:name="Processor Chain">
						<dw:transform-message doc:name="Account to Customer" metadata:id="029089e4-fa10-4eb5-bfcb-eca9dabc99fd">
                            <dw:input-payload/>
							<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	companyName: payload.Account.Name,
	externalId: payload.Account.Id,
	fax: payload.Account.Fax,
	phone: payload.Account.Phone,
	subsidiary: {
		internalId: p('nets.subsidiaryId'),
		type: 'SUBSIDIARY'
	}
}]]></dw:set-payload>
						</dw:transform-message>
						<netsuite:add-record config-ref="Netsuite" recordType="CUSTOMER" doc:name="add Customer">
							<netsuite:attributes ref="#[payload]"/>
						</netsuite:add-record>
					</processor-chain>
				</enricher>
                <logger message="Created Customer external ID: #[payload.customerExternalId]" level="INFO" doc:name="Log customer if does not exist result"/>
            </batch:step>
            <batch:step name="upsertInventoryItems">
            	<enricher source="#[payload]" target="#[recordVars['itemsUpsertResult']]" doc:name="upsert invertoryItems">
                    <processor-chain doc:name="Processor Chain">
                <dw:transform-message metadata:id="d9b0df56-adf5-4eb1-9286-dbd07bf7fd91" doc:name="OpportunityLineItems To InventoryItems">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.OpportunityLineItems map
{
	cost: $.ListPrice,
	displayName: $.Name,
	externalId: $.Product2Id,
	itemId: $.ProductCode,
	quantityAvailable: $.Quantity,
	subsidiaryList: {
		recordRef: [{
			internalId: p('nets.subsidiaryId')
		}]
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <netsuite:upsert-list config-ref="Netsuite" recordType="INVENTORY_ITEM" doc:name="Upsert inventoryItems">
                    <netsuite:records ref="#[payload]"/>
                </netsuite:upsert-list>
                <logger message="Upserted inventory items: #[payload]" level="INFO" doc:name="Log upsert inventoryItems result"/>
            	</processor-chain>
                </enricher>
            </batch:step>
            <batch:step name="upsertSalesOrderInNetsuite" accept-expression="payload != null">
                <dw:transform-message doc:name="Prepare data to insert Sales Order" metadata:id="5b9990bc-0816-4dff-a30a-4ae8dcb04403">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	entity: {
		externalId: payload.customerExternalId,
		type: 'CUSTOMER'
	},
	externalId: payload.Id,
	itemList: {
		item: payload.OpportunityLineItems map {
			amount: $.ListPrice,
			item: {
				externalId: $.Product2Id,
				type: 'INVENTORY_ITEM'
			},
			quantity: $.Quantity
		},
		replaceAll: true
	},
	orderStatus: "PENDING_FULFILLMENT"
}]]></dw:set-payload>
                </dw:transform-message>
                <netsuite:upsert-record config-ref="Netsuite" recordType="SALES_ORDER" doc:name="Upsert Sales Order in Netsuite">
                    <netsuite:attributes ref="#[payload]"/>
                </netsuite:upsert-record>
                <logger message="Upserted Sales Order with internal ID: #[payload.getInternalId()] " level="INFO" doc:name="Log upsert result"/>
            </batch:step>
        </batch:process-records>
    </batch:job>
    <flow doc:description="This flow is the entry point to the Kick business logic.  This flow should control the direction of the application, and it should be called by the different endpoints that your Kick exposes to trigger it." name="mainFlow" processingStrategy="synchronous">
        <batch:execute name="syncOpportunitiesBatch" doc:name="Call syncOpportunitiesBatch"/>

        <exception-strategy doc:name="Reference Exception Strategy" ref="defaultChoiceExceptionStrategy"/>
    </flow>


</mule>