<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce Opportunity to Netsuite Sales Order Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to synchronize Closed Won Opportunities from SalesForce to Netsuite system as Sales Order object.

This Template should serve as a foundation for setting an online sync of opportunities from SalesForce instance to NetSuite as Sales Order. Every time there is a new opportunity or a change in an already existing one, the integration will poll for changes in SalesForce instance and it will be responsible for updating the Sales Order in NetSuite.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Anypoint Template leverage the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing) 

The batch job is divided into *Input*, *Process* and *On Complete* stages.
The integration is triggered by a poll defined in the flow that is going to trigger the application, querying newest SalesForce updates/creations matching a filter criteria and executing the batch job.
In the *Process* phase, the Customer corresponding to the source Opportunity's Account will be searched for in NetSuite. If the Customer does not exist in NetSuite, it will be created in the next step. Otherwise the existing ID will be used. 
Then all the products (Opportunity Line Items) associated with the Opportunity are searched for and inserted into NetSuite as InventoryLineItems.
Last step upserts the Sales Order object referencing the Customer and Items created/updated in previous steps.

Finally during the On Complete stage the Anypoint Template will log output statistics data into the console.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case you just need to hit the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/migrateopportunities` and this will create a CSV report and send it to the mails set.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set up and started, there is no need to do anything else. Every time a opportunity is created or modified, it will be automatically synchronised to Netsuite as long as it is 'Closed Won' and has products associated.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ poll.frequencyMillis `60000`
+ poll.startDelayMillis `0`
+ watermark.defaultExpression `YESTERDAY`


#### SalesForce Connector configuration
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.a.url `https://login.salesforce.com/services/Soap/u/31.0`

#### SalesForce Connector configuration
+ netsuite.email `email@example.com`
+ netsuite.password `password`
+ netsuite.account `TSTDRVxxxxxxx`
+ netsuite.roleId `3`  
+ netsuite.subsidiaryId=1
+ netsuite.locationId=2
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The Anypoint Template calls to the API can be calculated using the formula:

***1 + X ***

Being ***X*** the number of Opportunities to be synchronized on each run. 

]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow that will poll for SalesForce creations/updates. The severeal message processors constitute the actions that fully implement the logic of this Template:

1. During the Input stage the Template will query the SalesForce isntance for existing opportunities that match the filter criteria.
2. During the Process stage, each SFDC opportunity will be upserted to NetSuite system. Before this is possible, the template will query the NetSuite if Customer and the products exist and if not it makes sure these objects are created.
Finally during the On Complete stage the Template will log batch statistics into the console.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is file is conformed by a Flow containing the Poll that will periodically query Salesforce for updated/created Opportunities that meet the defined criteria in the query. And then executing the batch job process with the query results.
]]>
		</section>
	</sections>
</configuration>