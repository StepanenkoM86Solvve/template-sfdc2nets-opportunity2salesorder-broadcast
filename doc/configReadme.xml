<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce Opportunity to NetSuite Sales Order Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to synchronize Opportunities with 'Closed Won' stage from Salesforce to NetSuite system. In NetSuite, these objects become Sales Orders.

This Template should serve as a foundation for setting an online sync of Opportunities from Salesforce instance to NetSuite as Sales Orders. Every time there is a new Opportunity matching the criteria defined
or a change in an already existing one in SalesForce, the integration will detect the changes and it will insert/update the Sales Order in NetSuite.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Anypoint Template leverage the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing) 

The batch job is divided into *Input*, *Process* and *On Complete* stages.
The integration is triggered by a poll defined in the flow that is going to trigger the application, querying newest Salesforce updates/creations matching a filter criteria and executing the batch job.
We query not only for Opportunity's data alone, but we retrieve information about related Account and Products as Sales Order in NetSuite system requires references to related Customer and Items in order to be created. 
This decreases the numbers of queries required to SalesForce to 1 per poll cycle.
Therefore, we filter out propagation of Opportunities that are not 'Closed Won', don't have an Account or at least one Product associated.

In the Batch Job's *Process* phase, the Customer corresponding to the source Opportunity's Account will be searched for in NetSuite. We use the *externalId* property of objects in NetSuite to match their SalesForce counterpart. 
This property should contain *Id* property of SalesForce object.
If the Customer does not exist in NetSuite, it will be created in the next step, so that we have it ready to reference it later to Sales Order.
Then all the products (Opportunity Line Items) associated with the Opportunity are upserted into NetSuite as InventoryItem objects.
Last step upserts the Sales Order object referencing the Customer and Items created/updated in the previous steps.

Finally during the *On Complete* stage the Anypoint Template will log output statistics data into the console.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**
]]>
		</section>
		<section id="nets_dst">
<![CDATA[
Customer must be assigned to subsidiary. In this template, this is done statically and you must configure the property file with subsidiary *internalId* that is already in the system. You can find out this number by entering 'subsidiaries' 
into the NetSuite search field and selecting 'Page - Subsidiaries'. When you click on the 'View' next to the subsidiary chosen, you will see the ID in the URL line. Please, use this Id to populate *nets.subsidiaryId* property in the property file.
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set up and started, there is no need to do anything else. Every time a opportunity is created or modified, it will be automatically synchronised to NetSuite as long as it is 'Closed Won' and has products associated.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ poll.frequencyMillis `60000`
+ poll.startDelayMillis `0`
+ watermark.defaultExpression `YESTERDAY`


#### Salesforce Connector configuration
+ sfdc.username `bob.dylan@orga`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/31.0`

#### NetSuite Connector configuration
+ nets.email `email@example.com`
+ nets.password `password`
+ nets.account `TSTDRVxxxxxxx`
+ nets.roleId `9`  
+ nets.subsidiaryId `1`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. However, in this template, only one call per poll cycle is done to retrieve all the information required.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented in this XML, directed by one flow that will poll for Salesforce Opportunity creations/updates. The severeal message processors constitute the actions that fully implement the logic of this Template:

1. During the Input stage the Template will query the Salesforce instance for existing opportunities (including associated Account and Products) that match the filter criteria.
2. During the Process stage, each SFDC opportunity will be upserted to NetSuite system. Before this is possible, the template will query the NetSuite if Customer and the Items exists and if not, it makes sure these objects are created.
Finally during the On Complete stage the Template will log batch statistics into the console.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This file is conformed by a Flow containing the Poll that will periodically query Salesforce for updated/created Opportunities that meet the defined criteria in the query. And then executing the batch job process with the query results.
]]>
		</section>
	</sections>
</configuration>